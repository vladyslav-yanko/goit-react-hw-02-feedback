{"version":3,"sources":["Components/FeedbackOptions/FeedbackOptions.js","Components/Statistics/Statistics.js","Components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","Components/FeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","states","onFeedback","Object","keys","map","i","type","className","s","btn","onClick","Statistics","total","percentage","Notification","message","App","state","good","neutral","bad","addFeedback","e","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yTAGe,SAASA,EAAT,GAAkD,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,WAChD,OACE,mCACGC,OAAOC,KAAKH,GAAQI,KAAI,SAAAC,GAAC,OACxB,wBAEEC,KAAK,SACLC,UAAWC,IAAEC,IACbC,QAAS,WACPT,EAAWI,IALf,SAQGA,GAPIA,Q,MCLA,SAASM,EAAT,GAAoD,IAA9BX,EAA6B,EAA7BA,OAAQY,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WAClD,OACE,qCACGX,OAAOC,KAAKH,GAAQI,KAAI,SAAAC,GAAC,OACxB,8BACGA,EADH,KACQL,EAAOK,KADPA,MAIV,yCAAYO,KACZ,6CAAgBC,EAAhB,UCZS,SAASC,EAAT,GAAyC,IAAD,IAAhBC,eAAgB,MAAN,GAAM,EACrD,OAAO,8BAAMA,I,UCMMC,E,4MACnBC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,YAAc,SAAAC,GACZ,EAAKC,UAAS,SAAAC,GAAS,sBAAQF,EAAIE,EAAUF,GAAK,O,EAEpDG,mBAAqB,WACnB,MAA+B,EAAKR,MACpC,OADA,EAAQC,KAAR,EAAcC,QAAd,EAAuBC,K,EAGzBM,gCAAkC,WAChC,IAAMd,EAAQ,EAAKa,qBACnB,OAAOb,EAAQ,EAAIe,KAAKC,MAAO,EAAKX,MAAMC,KAAON,EAAS,KAAO,G,4CAGnE,WACE,IAAMA,EAAQiB,KAAKJ,qBACnB,OACE,sBAAKlB,UAAU,UAAf,UACE,uDACA,cAAC,EAAD,CAAiBP,OAAQ6B,KAAKZ,MAAOhB,WAAY4B,KAAKR,cACtD,4CACA,8BACGT,EAAQ,EACP,cAACD,EAAD,CACEX,OAAQ6B,KAAKZ,MACbL,MAAOA,EACPC,WAAYgB,KAAKH,oCAGnB,cAACZ,EAAD,CAAcC,QAAQ,+B,GAlCDe,aCKlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,gC","file":"static/js/main.d9be398e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport s from 'Components/FeedbackOptions/FeedbackOptions.module.css';\n\nexport default function FeedbackOptions({ states, onFeedback }) {\n  return (\n    <>\n      {Object.keys(states).map(i => (\n        <button\n          key={i}\n          type=\"button\"\n          className={s.btn}\n          onClick={() => {\n            onFeedback(i);\n          }}\n        >\n          {i}\n        </button>\n      ))}\n    </>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  states: PropTypes.object.isRequired,\n  onFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from 'Components/Statistics/Statistics.module.css';\n\nexport default function Statistics({ states, total, percentage }) {\n  return (\n    <>\n      {Object.keys(states).map(i => (\n        <p key={i}>\n          {i}: {states[i]}\n        </p>\n      ))}\n      <p>total : {total}</p>\n      <p>percentage: {percentage}%</p>\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  states: PropTypes.object.isRequired,\n  total: PropTypes.number.isRequired,\n  percentage: PropTypes.number.isRequired,\n};\n","export default function Notification({ message = '' }) {\n  return <div>{message}</div>;\n}\n","import React, { Component } from 'react';\nimport FeedBackOptions from 'Components/FeedbackOptions/FeedbackOptions';\nimport Statistics from 'Components/Statistics/Statistics';\nimport Notification from 'Components/Notification/Notification';\n\nimport './App.css';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = e => {\n    this.setState(prevState => ({ [e]: prevState[e] + 1 }));\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    return total > 0 ? Math.round((this.state.good / total) * 100) : 0;\n  };\n\n  render() {\n    const total = this.countTotalFeedback();\n    return (\n      <div className=\"section\">\n        <h2>Please leave Feedback</h2>\n        <FeedBackOptions states={this.state} onFeedback={this.addFeedback} />\n        <h2>Statistics</h2>\n        <div>\n          {total > 0 ? (\n            <Statistics\n              states={this.state}\n              total={total}\n              percentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__3HxwN\"};"],"sourceRoot":""}